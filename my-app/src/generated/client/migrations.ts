export default [
  {
    "statements": [
      "CREATE TABLE \"items\" (\n  \"value\" TEXT NOT NULL,\n  CONSTRAINT \"items_pkey\" PRIMARY KEY (\"value\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"rowmap\" (\n  \"id\" TEXT NOT NULL,\n  \"pos\" INTEGER,\n  CONSTRAINT \"rowmap_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"colmap\" (\n  \"id\" TEXT NOT NULL,\n  \"pos\" INTEGER,\n  CONSTRAINT \"colmap_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"contentmap\" (\n  \"rowindex\" TEXT NOT NULL,\n  \"colindex\" TEXT NOT NULL,\n  \"content\" TEXT,\n  CONSTRAINT \"contentmap_colindex_fkey\" FOREIGN KEY (\"colindex\") REFERENCES \"colmap\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"contentmap_rowindex_fkey\" FOREIGN KEY (\"rowindex\") REFERENCES \"rowmap\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"contentmap_pkey\" PRIMARY KEY (\"rowindex\", \"colindex\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"sheets\" (\n  \"id\" TEXT NOT NULL,\n  \"rows\" INTEGER NOT NULL,\n  \"cols\" INTEGER NOT NULL,\n  CONSTRAINT \"sheets_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"content\" (\n  \"id\" TEXT NOT NULL,\n  \"sheet_id\" TEXT NOT NULL,\n  \"row\" INTEGER NOT NULL,\n  \"col\" INTEGER NOT NULL,\n  \"content\" TEXT,\n  CONSTRAINT \"content_sheet_id_fkey\" FOREIGN KEY (\"sheet_id\") REFERENCES \"sheets\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"content_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"content_sheet_row_col_idx\" ON \"content\" (\"sheet_id\" ASC, \"row\" ASC, \"col\" ASC);\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.items', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_items_primarykey;",
      "CREATE TRIGGER update_ensure_main_items_primarykey\n  BEFORE UPDATE ON \"main\".\"items\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"value\" != new.\"value\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column value as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_items_into_oplog;",
      "CREATE TRIGGER insert_main_items_into_oplog\n   AFTER INSERT ON \"main\".\"items\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'INSERT', json_object('value', new.\"value\"), json_object('value', new.\"value\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_items_into_oplog;",
      "CREATE TRIGGER update_main_items_into_oplog\n   AFTER UPDATE ON \"main\".\"items\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'UPDATE', json_object('value', new.\"value\"), json_object('value', new.\"value\"), json_object('value', old.\"value\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_items_into_oplog;",
      "CREATE TRIGGER delete_main_items_into_oplog\n   AFTER DELETE ON \"main\".\"items\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'DELETE', json_object('value', old.\"value\"), NULL, json_object('value', old.\"value\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.rowmap', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_rowmap_primarykey;",
      "CREATE TRIGGER update_ensure_main_rowmap_primarykey\n  BEFORE UPDATE ON \"main\".\"rowmap\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_rowmap_into_oplog;",
      "CREATE TRIGGER insert_main_rowmap_into_oplog\n   AFTER INSERT ON \"main\".\"rowmap\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.rowmap')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'rowmap', 'INSERT', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'pos', new.\"pos\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_rowmap_into_oplog;",
      "CREATE TRIGGER update_main_rowmap_into_oplog\n   AFTER UPDATE ON \"main\".\"rowmap\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.rowmap')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'rowmap', 'UPDATE', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'pos', new.\"pos\"), json_object('id', old.\"id\", 'pos', old.\"pos\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_rowmap_into_oplog;",
      "CREATE TRIGGER delete_main_rowmap_into_oplog\n   AFTER DELETE ON \"main\".\"rowmap\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.rowmap')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'rowmap', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('id', old.\"id\", 'pos', old.\"pos\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.colmap', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_colmap_primarykey;",
      "CREATE TRIGGER update_ensure_main_colmap_primarykey\n  BEFORE UPDATE ON \"main\".\"colmap\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_colmap_into_oplog;",
      "CREATE TRIGGER insert_main_colmap_into_oplog\n   AFTER INSERT ON \"main\".\"colmap\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.colmap')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'colmap', 'INSERT', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'pos', new.\"pos\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_colmap_into_oplog;",
      "CREATE TRIGGER update_main_colmap_into_oplog\n   AFTER UPDATE ON \"main\".\"colmap\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.colmap')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'colmap', 'UPDATE', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'pos', new.\"pos\"), json_object('id', old.\"id\", 'pos', old.\"pos\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_colmap_into_oplog;",
      "CREATE TRIGGER delete_main_colmap_into_oplog\n   AFTER DELETE ON \"main\".\"colmap\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.colmap')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'colmap', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('id', old.\"id\", 'pos', old.\"pos\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.contentmap', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_contentmap_primarykey;",
      "CREATE TRIGGER update_ensure_main_contentmap_primarykey\n  BEFORE UPDATE ON \"main\".\"contentmap\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"colindex\" != new.\"colindex\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column colindex as it belongs to the primary key')\n      WHEN old.\"rowindex\" != new.\"rowindex\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column rowindex as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_contentmap_into_oplog;",
      "CREATE TRIGGER insert_main_contentmap_into_oplog\n   AFTER INSERT ON \"main\".\"contentmap\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.contentmap')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'contentmap', 'INSERT', json_object('colindex', new.\"colindex\", 'rowindex', new.\"rowindex\"), json_object('colindex', new.\"colindex\", 'content', new.\"content\", 'rowindex', new.\"rowindex\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_contentmap_into_oplog;",
      "CREATE TRIGGER update_main_contentmap_into_oplog\n   AFTER UPDATE ON \"main\".\"contentmap\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.contentmap')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'contentmap', 'UPDATE', json_object('colindex', new.\"colindex\", 'rowindex', new.\"rowindex\"), json_object('colindex', new.\"colindex\", 'content', new.\"content\", 'rowindex', new.\"rowindex\"), json_object('colindex', old.\"colindex\", 'content', old.\"content\", 'rowindex', old.\"rowindex\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_contentmap_into_oplog;",
      "CREATE TRIGGER delete_main_contentmap_into_oplog\n   AFTER DELETE ON \"main\".\"contentmap\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.contentmap')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'contentmap', 'DELETE', json_object('colindex', old.\"colindex\", 'rowindex', old.\"rowindex\"), NULL, json_object('colindex', old.\"colindex\", 'content', old.\"content\", 'rowindex', old.\"rowindex\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_contentmap_colindex_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_contentmap_colindex_into_oplog\n  AFTER INSERT ON \"main\".\"contentmap\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.colmap') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'colmap', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"colmap\" WHERE \"id\" = new.\"colindex\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_contentmap_colindex_into_oplog;",
      "CREATE TRIGGER compensation_update_main_contentmap_colindex_into_oplog\n   AFTER UPDATE ON \"main\".\"contentmap\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.colmap') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'colmap', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"colmap\" WHERE \"id\" = new.\"colindex\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_contentmap_rowindex_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_contentmap_rowindex_into_oplog\n  AFTER INSERT ON \"main\".\"contentmap\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.rowmap') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'rowmap', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"rowmap\" WHERE \"id\" = new.\"rowindex\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_contentmap_rowindex_into_oplog;",
      "CREATE TRIGGER compensation_update_main_contentmap_rowindex_into_oplog\n   AFTER UPDATE ON \"main\".\"contentmap\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.rowmap') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'rowmap', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"rowmap\" WHERE \"id\" = new.\"rowindex\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.sheets', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_sheets_primarykey;",
      "CREATE TRIGGER update_ensure_main_sheets_primarykey\n  BEFORE UPDATE ON \"main\".\"sheets\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_sheets_into_oplog;",
      "CREATE TRIGGER insert_main_sheets_into_oplog\n   AFTER INSERT ON \"main\".\"sheets\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sheets')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sheets', 'INSERT', json_object('id', new.\"id\"), json_object('cols', new.\"cols\", 'id', new.\"id\", 'rows', new.\"rows\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_sheets_into_oplog;",
      "CREATE TRIGGER update_main_sheets_into_oplog\n   AFTER UPDATE ON \"main\".\"sheets\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sheets')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sheets', 'UPDATE', json_object('id', new.\"id\"), json_object('cols', new.\"cols\", 'id', new.\"id\", 'rows', new.\"rows\"), json_object('cols', old.\"cols\", 'id', old.\"id\", 'rows', old.\"rows\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_sheets_into_oplog;",
      "CREATE TRIGGER delete_main_sheets_into_oplog\n   AFTER DELETE ON \"main\".\"sheets\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sheets')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sheets', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('cols', old.\"cols\", 'id', old.\"id\", 'rows', old.\"rows\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.content', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_content_primarykey;",
      "CREATE TRIGGER update_ensure_main_content_primarykey\n  BEFORE UPDATE ON \"main\".\"content\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_content_into_oplog;",
      "CREATE TRIGGER insert_main_content_into_oplog\n   AFTER INSERT ON \"main\".\"content\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.content')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'content', 'INSERT', json_object('id', new.\"id\"), json_object('col', new.\"col\", 'content', new.\"content\", 'id', new.\"id\", 'row', new.\"row\", 'sheet_id', new.\"sheet_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_content_into_oplog;",
      "CREATE TRIGGER update_main_content_into_oplog\n   AFTER UPDATE ON \"main\".\"content\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.content')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'content', 'UPDATE', json_object('id', new.\"id\"), json_object('col', new.\"col\", 'content', new.\"content\", 'id', new.\"id\", 'row', new.\"row\", 'sheet_id', new.\"sheet_id\"), json_object('col', old.\"col\", 'content', old.\"content\", 'id', old.\"id\", 'row', old.\"row\", 'sheet_id', old.\"sheet_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_content_into_oplog;",
      "CREATE TRIGGER delete_main_content_into_oplog\n   AFTER DELETE ON \"main\".\"content\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.content')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'content', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('col', old.\"col\", 'content', old.\"content\", 'id', old.\"id\", 'row', old.\"row\", 'sheet_id', old.\"sheet_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_content_sheet_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_content_sheet_id_into_oplog\n  AFTER INSERT ON \"main\".\"content\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sheets') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'sheets', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"sheets\" WHERE \"id\" = new.\"sheet_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_content_sheet_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_content_sheet_id_into_oplog\n   AFTER UPDATE ON \"main\".\"content\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sheets') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'sheets', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"sheets\" WHERE \"id\" = new.\"sheet_id\";\nEND;"
    ],
    "version": "20240612113714_780"
  }
]